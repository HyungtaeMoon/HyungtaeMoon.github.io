---
layout: post
title:  "django 경로 설정 확인"
date:   2018-09-23 10:41:59
author: Moon Hyungtae
categories: Django
tags:	django
cover:  "/assets/instacode.png"
---
`장고` `홈페이지`
<br>
<br>
#### # 장고(Django) 세팅 방법
- git, django, pyenv, pipenv 가 설치되어 있다는 가정

프로젝트를 시작하면 git 을 세팅해주는데, 스냅샷 단위로 관리되기도 하고 쓰다보니 프로젝트 관리하는데 이만한 툴은 없는 것 같다는 생각이 들기도 한다.

```python
# .git 디렉토리를 생성
git init

# git 에 포함하지 말아야 할 파일들을 작성
vi .gitignore
```

```python
# 가상환경을 설정하고 가상환경으로 진입
>> pipenv shell

# 특정 버전으로 파이썬을 설치하고 진입하기
pipenv --python 3.6.5
pipenv shell
```
이와 같이 하면 가상환경명이 생성되는데 <디렉토리명+임의의 가상환경명> 으로 설정이 된 것으로 확인할 수 있다. 가상환경을 사용하며 주의할 점은 정신이 없다보면 동일한 CLI 에서 다른 프로젝트로 이동하기 마련인데 기존 가상환경에서 exit 하지 않고 다른 프로젝트로 진입해서 '왜 패키지가 설치 안됐지?' 라는 멘붕에 빠질 수도 있으니 주의하자.

```python
# 현재 위치에서 파이참을 실행
charm .

# preference(설정) 창을 오픈
ctrl + ,

# Project: <디렉토리명>
#   Project Interpreter 에서
#     이용하고자 하는 가상환경을 선택
# 가상환경 디렉토리 경로는 아래의 경로를 따른다.
.local/share/virtualenvs/<디렉토리+가상환경명>/bin/pip3.6
```

그리고 파이썬 프레임워크인 Django 를 설치해주는데 가상환경 안에서 프로젝트를 진행하기 때문에 pipenv 도 같이 입력하여 설치해준다.

```python
# CLI 창에서 Django 설치
>> pipenv install django

# django 프로젝트를 관리할 디렉토리 생성 <임의의 이름>
>> django-admin.py startproject <config>

# django 프로젝트 안에서 관리해줄 애플리케이션 생성 <임의의 이름>
>> python manage.py startapp <members>
```
참고로 django 의 기능 startapp 은 django-admin.py 로도 생성이 가능하지만 가급적 project 디렉토리 안의 manage.py 를 이용하여 생성하는 것이 효율적이라고 생각된다. (이렇게해야 project 안에 app 이 생성되어 실수를 줄일 수 있음)

```
django-admin.py startapp <임의의 이름>

또는

python manage.py startapp <임의의 이름>
```
2가지 모두 적용이 되니 이건 편한대로 사용하면 될 것 같다.


#### # 누군가가 서버에 웹 사이트를 요청하면!?
```
 Browser ----> server ----> Django application 실행
      (request)

urlresolver 가 아래 중에 어디로 갈지 경로를 설정
view1
view2
view3

(만일 view1 이 선택)
view1 ----> process ----> response

그리고는 다시 역순으로 server ----> browser 로 리다이렉트
```

**runserver 실행 방법**

```
[manage.py가 있는 폴더에서]
python manage.py runserver

[로컬서버 주소]
127.0.0.1:8000

# 에러메시지가 발생하면 로컬서버에서 친절히 알려주고,
# 터미널창 runserver도 같이 확인하는 것이 좋다.
```

**경로설정 이해하기**

```
[폴더 구조]
djangogirls-tutorial <-- 이 프로젝트 컨테이너 폴더(Root)
app <-- Django프로젝트 관련 코드 컨테이너 폴더
  blog
    migrations
  config
    settings.py
  templates
  .gitignore
  .git/
  .requirements.txt
```
<br>
Q. templates 폴더를 가리킬 수 있도록 설정
<br>
```

[루트폴더 설정]
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

BASE_DIR은 app(루트)폴더를 가리킨다

```
**영어 문법처럼 역순으로 해석한다.**
<br>
<br>
os.path.abspath(__file__)
app / config / `settings.py`를 가리킴
<br>
<br>
os.path.dirname
app / `config` / settings.py 파일을 가리킴
<br>
<br>
os.path.dirname
`app` / config / setting.py
<br>
<br>
```

[templates 경로 설정]
TEMPLATES_DIR = os.path.join(BASE_DIR, 'templates')

```
<br>
**역시 영어문법처럼 역순으로 접근해본다.**
(BASE_DIR, 'templates')
BASE_DIR기준으로 templates 로 내려간다.
<br>
<br>
os.path.join
config 와 templates는 동일한 등급이다. 그래서 join....이거 더 알아보자. 일단 가야할 길이 멀어서 skip
<br>
<br>
**views.py 파일과 settings.py 의 관계?**

```python
from django.http import HttpResponse


html = render_to_string('blog/post_list.html')

return HttpResponse(html)
```
`render? HttpResponse?`
<br>
경로에 해당하는 HTML파일을 문자열로 로드해주고, 가져온 문자열을 돌려준다.
<br>
`내 맘대로 해석`
html 변수에 함수 render_to_string 함수를 이용하여 (templates/blog/post_list.html)에 렌더링을 해줘서 Http 방식으로 만들어주는 함수 HttpResponse를 사용했다.
<br>
<br>
<br>
아무튼 이렇게 적용한 함수들은 settings.py 에 적용시켜야 정상 작동을 한다.
<br>
<br>
그리고 views.py 파일 안에 (blog/post_list.html)은 templates라는 폴더를 사용자가 직접 만들었기 때문에 settings.py에 경로를 직접 등록해주어야 한다.
<br>
```
TEMPLATES = [
  {
      'DIRS':
        TEMPLATES_DIR, <--이거 등록
  }
]
```
> 여기까지 정리를 해보자면

저장할? 불러올? 폴더를 지정하고, post_list.html 파일을 local서버에서 불러올 수 있는 것까지 해보았다...
<br>
`commit message`
<br>
```
HTML 파일을 불러올 때 render_to_string을 사용

TEMPLATES_DIR을 지정 후, 해당 경로를 settings모듈의 TEMPLATES['DIR']에 추가
render_to_string에서 템플릿 파일을 찾기 위해 주어진 경로는 settings모듈의 TEMPLATES['DIRS']에 있는 폴더 목록을 기준으로 검색한다.
```
<br>
<br>
#### # 용어설명
<br>
HttpResponse
<br>
서버가 사용자의 요청에 대한 응답을 해주는 것
<br>
<br>
```
헤더   상태코드
      응답헤더
-------------
  공백부분
-------------
  본문

```
